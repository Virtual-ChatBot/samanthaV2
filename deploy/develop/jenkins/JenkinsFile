pipeline {
    environment {
        SERVER_LIST = "prod1,prod2"
    }

    agent any

    stages {
        stage('read configFile') {
            steps {
                configFileProvider([configFile(fileId: 'prod', targetLocation: 'src/main/resources/application.properties')]) {
                    sh "cat src/main/resources/application.properties"
                }

                configFileProvider([configFile(fileId: 'application-prod', targetLocation: 'src/main/resources/application-prod.properties')]) {
                    sh "cat src/main/resources/application-prod.properties"
                }
            }
        }

        stage("SonarQube analysis") {
            steps {
                withSonarQubeEnv('SonarQube-Server') {
                    sh "chmod +x gradlew"
                    sh "./gradlew clean bootWar sonar \
                        -Dsonar.projectKey=samantha \
                        -Dsonar.host.url=http://112.172.203.227:9000 \
                        -Dsonar.login=sqp_36b869e21825d6eab8bc2b3728031032bd921b85"
                }
            }
        }

        stage("Deploy") {
            steps {
                echo "deploy.."
                echo "${SERVER_LIST}"

                script {
                    SERVER_LIST.tokenize(',').each {
                        echo "SERVER: ${it}"
                        ssh_publisher("${it}")
                    }
                }
            }
        }

        stage('SonarQube Quality Gate'){
            steps{
                timeout(time: 1, unit: 'MINUTES') {
                    script{
                        echo "Start"
                        def qg = waitForQualityGate()
                        echo "Status: ${qg.status}"
                        if(qg.status != 'OK') {
                            echo "NOT OK Status: ${qg.status}"
                            updateGitlabCommitStatus(name: "SonarQube Quality Gate", state: "failed")
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        } else{
                            echo "OK Status: ${qg.status}"
                            updateGitlabCommitStatus(name: "SonarQube Quality Gate", state: "success")
                        }
                        echo "End"
                    }
                }
            }
        }
    }
}

def ssh_publisher(SERVER_LIST) {
    sshPublisher(
        publishers:[
            sshPublisherDesc(
                configName: "${SERVER_LIST}",
                verbose: true,
                transfers: [
                    sshTransfer(
                        sourceFiles: "deploy/develop/script/*.sh",
                        removePrefix: "deploy/develop/script",
                        remoteDirectory: "script"
                    ),
                    sshTransfer(
                        sourceFiles: "build/libs/*.war",
                        removePrefix: "build/libs",
                        remoteDirectory: "/",
                        execCommand: "sh /home/samantha/tomcat_data/${SERVER_LIST}/script/deploy.sh ${DOCKER_PASSWORD} ${SERVER_IP} ${PROD_PORT} ${SERVER_LIST}"
                    )
                ]
            )
        ]
    )
}