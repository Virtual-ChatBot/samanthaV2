// (5)
def ssh_publisher(SERVER_CONFIG) {
    sshPublisher(
        publishers:[
            sshPublisherDesc(
                configName: "${SERVER_CONFIG}",
                verbose: true,
                transfers: [
                    // (5.1) Copy script files
                    sshTransfer(
                        sourceFiles: "deploy/develop/script/*.sh",
                        removePrefix: "deploy/develop/script",
                        remoteDirectory: "script"
                    ),
                    // (5.2) Copy build files
                    sshTransfer(
                        sourceFiles: "build/libs/*.war",
                        removePrefix: "build/libs",
                        remoteDirectory: "/",
                        // Absolute path.
                        execCommand: "sh /home/samantha/tomcat_data/prod1/script/deploy_server.sh"
                    ),
                    // (5.3) Health check
                    sshTransfer(
                        // Absolute path.
                        execCommand: "sh /home/samantha/tomcat_data/prod1/script/health_check.sh"
                    )
                ]
            )
        ]
    )
}

// (1)
pipeline {
    environment {
        // (2) Registered in Jenkins
        SERVER_LIST = "prod1,prod2"
        DOCKER_PASSWORD = "docker.password"
        SERVER_IP = "server.ip"
        PROD1_PORT = "prod1.port"
        PROD2_PORT = "prod2.port"
    }

    agent any

    stages {
        stage('read configFile') {
            steps {
                configFileProvider([configFile(fileId: 'prod', targetLocation: 'src/main/resources/application.properties')]) {
                    sh "cat src/main/resources/application.properties"
                }

                configFileProvider([configFile(fileId: 'application-prod', targetLocation: 'src/main/resources/application-prod.properties')]) {
                    sh "cat src/main/resources/application-prod.properties"
                }
            }
        }

        stage("Build") {
        	// (3)
            steps {
                sh "chmod +x gradlew"
                sh "./gradlew clean bootWar"
            }
        }

        stage("Deploy") {
            steps {
                echo "deploy.."
                echo "${SERVER_LIST}"

                script {
                	// (4)
                    SERVER_LIST.tokenize(',').each {
                        echo "SERVER: ${it}"
                        ssh_publisher("${it}")
                    }
                }
            }
        }
    }
}