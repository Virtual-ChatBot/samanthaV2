pipeline {
    environment {
        SERVER_LIST = "prod1,prod2"
    }

    agent any

    stages {
        stage('Preparation') {
            steps {
                configFileProvider([configFile(fileId: 'prod', targetLocation: 'src/main/resources/application.properties')]) {
                    sh "cat /var/jenkins_home/workspace/prod/src/main/resources/application.properties"
                }

                configFileProvider([configFile(fileId: 'application-prod', targetLocation: 'src/main/resources/application-prod.properties')]) {
                    sh "cat /var/jenkins_home/workspace/prod/src/main/resources/application-prod.properties"
                }

                configFileProvider([configFile(fileId: 'gradle', targetLocation: './gradle.properties')]) {
                    sh "cat /var/jenkins_home/workspace/prod/gradle.properties"
                }
            }
        }

        stage('Analysis') {
            steps {
                withSonarQubeEnv('SonarQube-Server') {
                    sh "chmod +x gradlew"
                    sh """
                        ./gradlew clean bootWar sonar \
                        -Dsonar.projectKey=${SONAR_PK} \
                        -Dsonar.host.url=${SONAR_URL} \
                        -Dsonar.login=${SONAR_SECRET}
                    """
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Deploy') {
            steps {
                echo "deploy.."
                echo "${SERVER_LIST}"

                script {
                    SERVER_LIST.tokenize(',').each {
                        echo "SERVER: ${it}"
                        ssh_publisher("${it}")
                    }
                }
            }
        }
    }
}

def ssh_publisher(SERVER_LIST) {
    sshPublisher(
        publishers:[
            sshPublisherDesc(
                configName: "${SERVER_LIST}",
                verbose: true,
                transfers: [
                    sshTransfer(
                        sourceFiles: "deploy/develop/script/*.sh",
                        removePrefix: "deploy/develop/script",
                        remoteDirectory: "script"
                    ),
                    sshTransfer(
                        sourceFiles: "build/libs/*.war",
                        removePrefix: "build/libs",
                        remoteDirectory: "/",
                        execCommand: "sh /home/samantha/tomcat_data/${SERVER_LIST}/script/deploy.sh ${DOCKER_PASSWORD} ${SERVER_IP} ${PROD_PORT} ${SERVER_LIST}"
                    )
                ]
            )
        ]
    )
}